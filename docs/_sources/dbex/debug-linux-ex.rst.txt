.. _debug-linux-ex:

Debugging Linux Applications with GDB
=====================================

.. glossary::

`Debug a cpu <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/overview.html>`_
      Use the simple SYCL application named
      `Array Transform <https://github.com/oneapi-src/oneAPI-samples/tree/master/Tools/ApplicationDebugger/array-transform>`__ to
      perform basic debugging operations, such as :code:`break`, :code:`run`,
      :code:`print`, :code:`continue`, :code:`info`, and :code:`next`. The
      application being debugged is limited to running on multiple CPU
      threads by setting the :code:`ONEAPI_DEVICE_SELECTOR=*:cpu`
      environment variable.

`Debug a gpu <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/debug-a-sycl-application-on-a-gpu.html>`_
      Use a simple SYCL application named 
      `Array Transform <https://github.com/oneapi-src/oneAPI-samples/tree/master/Tools/ApplicationDebugger/array-transform>`__
      to perform basic debugging operations, such as ``break``, ``run``,
      ``print``, ``continue``, ``info``, ``disassemble``, and ``next``.
      This tutorial describes how to interact with SIMD lanes, as additional
      thread elements. The application being debugged is instructed to run on
      a GPU by setting the ``ONEAPI_DEVICE_SELECTOR=level_zero:gpu``
      environment variable.

`Debug an FPGA <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/debug-a-sycl-program-on-the-fpga-emulator.html>`_
      The FPGA emulator runs on the CPU and behaves similarly to the CPU device.
      Make sure you complete the necessary setup steps described in the
      `Get Started Guide <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/get-started-guide-linux>`__
      and proceed with instructions on `Basic Debugging on CPU <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/debug-a-sycl-application-on-a-cpu.html#basic-debugging>`_.

`Debug an OpenCL Application <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/debugging-an-opencl-application.html>`_
      Starting with the 2023.0 release of oneAPI, debugging OpenCL™ applications
      is *not* supported. For earlier versions (2022.x and earlier), see `these instructions <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/debugging-an-opencl-application.html>`_.

`Debugging options <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/debugging-options.html>`_
      This section has some useful options for debugging, such as Auto-Attach, Reducing
      Overhead, Pretty-Printing, Prettify Frames, and more.

`Live Attach <https://www.intel.com/content/www/us/en/docs/distribution-for-gdb/tutorial-debugging-dpcpp-linux/current/live-attach.html>`_
      The debugger supports attaching to applications that are already running.
      This may be useful to debug workloads that show hang-like behavior, such as
      deadlocks, infinite loops, etc.